# This style is an homage to Michal Migurski's High Road demo:
# https://github.com/migurski/HighRoad
# It uses stops to set line and outline widths at various zoom levels,
# and the sort_key property to arrange bridges, overpasses, and tunnels
# by depth.
#

sources:
    osm:
        type: MVT
        url:  https://tile.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.mvt?api_key=S9LrJk1FTOuZGrdDC0seqg
    local:
        type: TopoJSON
        url: /data/van3.topojson
        #url: data/ubc-cycleways.geojson
camera:
    type: isometric
    axis: [0, .1] # very small building extrusion

lights:
    light1:
        type: directional
        direction: [1, 1, -.9]
        diffuse: .5
        ambient: .85

styles:
    flatlines:
        base: lines
        lighting: false # ignore lights
    flatpolys:
        base: polygons
        lighting: false # ignore lights
    paper:
        base: polygons
        texcoords: true
        material:
            normal:
                texture: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/normal-0031.jpg
                mapping: planar
                scale: 0.001
            ambient: 1.
            diffuse: 1.

scene:
    background:
        color: [.4, .4, .4]

layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            flatpolys:
                order: 0
                color: [.4, .4, .4]

    landuse:
        data: { source: osm, layer: landuse }
        parks:
            filter: { kind: [park, cemetery, graveyard, forest, wood, protected_area, recreation_ground, golf_course] }
            draw:
                paper:
                    order: 1
                    # tone down green as you zoom out
                    color: [[10, [0.2, 0.3, 0.4]], [14, [0.3, 0.4, 0.3]]]
        playgrounds:
            filter: { kind: [pitch, playground] }
            draw:
                flatpolys:
                    order: 2
                    color: [0.3, 0.675, 0.3]

    water:
        data: { source: osm, layer: water }
        draw:
            paper:
                order: 3
                color:   '#88bbee' #'#030b21' # '#040d2a' #

    bikeways:
        data: { source: local}
        properties:
            shared: true
            shared_path: true
            bikelane: true
            other: true
            faded: 0.15
            faded_outline: 0.05
        bikelane:
            filter: { cycleway: [lane,opposite_lane] }
            draw:
                flatlines:
                    interactive: true
                    order: 100
                    color: |
                        function() {var opacity=(properties.bikelane) ? 1 : properties.faded; return [.8, .7, .1, opacity];}
                    width: [[10, 1px], [14, 2px], [16, 3px], [17, 5m]]
                    outline:
                        color: |
                            function() {var opacity=(properties.bikelane) ? 1 : properties.faded_outline; return [0.8,0.8,0.8,opacity];}
                        width: [[12, 1px], [16, 1px]]
        shared:
            filter: { all: [cycleway: [shared, shared_lane,share_busway,opposite], not: {cycleway: lane }] }
            draw:
                flatlines:
                    interactive: true
                    order: 100
                    color: |
                        function() {var opacity=(properties.shared) ? 1 : properties.faded; return [.8, .3, .1, opacity];}
                    width: [[10, 1px], [14, 2px], [16, 3px], [17, 5m]]
                    outline:
                        color: |
                            function() {var opacity=(properties.shared) ? 1 : properties.faded_outline; return [0,0,0,opacity];}
                        width: [[12, 1px], [16, 1px]]

        shared_path:
            filter: [{highway: [path, pedestrian, footway], bicycle: yes}]
            draw:
                flatlines:
                    interactive: true
                    order: 100
                    color: |
                        function() {var opacity=(properties.shared_path) ? 1 : properties.faded; return [.1, .6, .9, opacity];}
                    width: [[10, 1px], [14, 2px], [16, 3px], [17, 5m]]
        cycleway:
            filter: [highway: cycleway, cycleway: [opposite_track]]
            draw:
                flatlines:
                    interactive: true
                    order: 100
                    color: |
                        function() {var opacity=(properties.shared_path) ? 1 : properties.faded; return [.1, .8, .1, opacity];}
                    width: [[10, 1px], [14, 2px], [16, 3px], [17, 5m]]
        everything_else:
            filter: {all: [not: [{highway: [path,pedestrian, footway], bicycle: yes}], not: { all: [cycleway: [shared, shared_lane,share_busway], not: {cycleway: lane }] }, not: { cycleway: lane }, not: [highway: cycleway, cycleway: [opposite,opposite_lane,opposite_track]]]}
            draw:
                flatlines:
                    interactive: true
                    order: 90
                    color: |
                        function() {var opacity=(properties.other) ? 1 : properties.faded; return [.8, .1, .8, opacity];}
                    width: [[10, 1px], [14, 2px], [16, 3px], [17, 5m]]


    roads:
        data: { source: osm, layer: roads }
        filter: { not: { highway: service, kind: rail } }
        draw:
            flatlines:
                order: 7
                color: [0.83, 0.83, 0.83]
                width: function () { return Math.log($zoom); }
                outline:
                    color: black

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                flatlines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }
        highway:
            filter: { kind: highway }
            draw:
                flatlines:
                    # put highways on top of all other roads
                    order: 8
                    color: [1.0, .8, .0]
                    width: [[11, 2px], [14, 3px], [16, 4px], [17, 10m]]
                    outline:
                        color: black
                        width: [[10, 0], [12, 1px], [16, 2px]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    flatlines:
                        color: [0.65882, 0.65882, 0.50196]
                        width: [[13, 0px], [14, 3px], [16, 5px], [18, 10m]]
                        outline:
                            color: [.3, .3, .3]
                            width: [[13, 0px], [14, 1px], [18, 1.5px]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        flatlines:
                            color: [0.8, 0.8, 0.7]
                            outline:
                                color: [.5, .5, .5]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    flatlines:
                        order: 5
                        color: [0.8, 0.8, 0.7]
                        outline:
                            color: [.5, .5, .5]
        major_road:
            filter: { kind: major_road }
            # default style
            draw:
                flatlines:
                    color: [[13, [0.8, 0.8, 0.8]], [17, [1, 1, 1]]]
                    width: [[13, 0px], [14, 2px], [16, 2.5px], [19, 8m]]
                    outline:
                        width: [[12, 0px], [13, .5px], [15, 1px]]
            primary:
                filter: { highway: primary }
                draw:
                    flatlines:
                        width: [[10, 0px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                        outline:
                            width: [[10, 0px], [11, .5px], [16, .75px]]
            secondary:
                filter: { highway: secondary }
                draw:
                    flatlines:
                        width: [[11, 0px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                        outline:
                            width: [[13, 0px], [14, 1.5px]]
            tertiary:
                filter: { highway: tertiary }
                draw:
                    flatlines:
                        width: [[11, 0px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                        outline:
                            width: [[12, 0px], [15, .5px], [16, 1.25px], [18, 4.5px]]

        minor_road:
            filter: { kind: minor_road, not: { highway: service } }
            draw:
                flatlines:
                    # order: 3
                    color: [[15, [0.6, 0.6, 0.6]], [17, [0.8, 0.8, 0.8]]]
                    width: [[13, 0px], [14, 1.5px], [15, 3px], [16, 5m]]
                    outline:
                        width: [[12, 0px], [14, .5px], [17, 1px]]
        path:
            filter: { kind: path }
            draw:
                flatlines:
                    color: [0.8, 0.8, 0.8]
                    width: [[16, 0], [17, 3m]]
                    outline:
                        width: .1

        z-order:
            filter: { $zoom: {min: 14} }
            draw:
                flatlines:
                    # let roads sort themselves past zoom 14
                    order: function() { return 6 + feature.sort_key; }
                    # but give them all the same outline
                    outline:
                        order: 21 # 15 is the starting aboveground level, plus 6

            bridges-tunnels:
                filter: { any: [is_bridge: yes, is_tunnel: yes] }
                draw:
                    flatlines:
                        outline:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: function() { return 6 + feature.sort_key; }

    # buildings are the only layer that gets lighting
    buildings:
        data: { source: osm, layer: buildings }
        draw:
            polygons:
                order: 9
                color: [.3, .3, .3]
                # under z15, only extrude buildings taller than 20m
                extrude: function () { return ( $zoom >= 16) || ($zoom >= 15 && feature.height > 20) }

    places:
        data: { source: osm }
        filter: { name: true, not: { kind: [county, state, island] } }
        draw:
            text:
                font:
                    weight: 100
                    size: 18px
                    family: Helvetica
                    fill: white
                    stroke: { color: black, width: 3 }
        # nix podunk burgs under z15
        minor-places:
            filter: { kind: [hamlet, village, town, neighbourhood, suburb, quarter], $zoom: { max: 15 } }
            visible: false